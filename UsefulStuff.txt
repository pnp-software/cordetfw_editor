
The urls.py file lists the url's which are recognized by the web server. Eg.:

    path('<int:project_id>/<int:val_set_id>', views.list_parameters, name='list_parameters')

This matches urls like "ParDb/2/3". If a browser tries to access this url, the web server executes the "list_parameters" functions in views.py. This function includes arguments project_id and val_set_id. The function must return an html page (through the 'render' call)  which is then returned to the browser as response to the access at "ParDb/2/3".

---------------------------------------------------------------------------------
 
Creation of admin user is done with:
    python3 manage.py createsuperuser
 This fails with an EOFError but is successful if executed with the python debugger:
    python3 -m pdb manage.py createsuperuser
 
 ---------------------------------------------------------------------------------
 
 Creation of projects is done through the Admin interface by adding the Projects form to the admin.py
 
 ---------------------------------------------------------------------------------
 
 Interactive shell is started with: python manage.py shell,
 
 If I want the "reset password mechanism" to work through the ending of an e-mail to the user, I need to provide information about the SMTP server (setting parameters  EMAIL_HOST, EMAIL_PORT, EMAIL_HOST_USER and EMAIL_HOST_PASSWORD). This presuambly means that I need to set up a dedicated e-mail account on our ionos server and then pass on its credentials to the Django server).
 
 
 ---------------------------------------------------------------------------------
Safe String

Suppose you have a template with the following code: {{ foo }}, and suppose that 'foo' is a user input. A malicious user might set 'foo' equal to: <script src="evil">. By default, Django will render 'foo' as follows:    
    
    &gt;script src="evil"&lt;

If I am sure that the content of foo is not malicious, I can use the 'safe' filter to get Django to render variable 'foo' exactly as written: 

     {{ foo|safe }} or {% autoescape off %}{{ foo }}{% endautoescape %} 


Safe Strings: strings that can be displayed safely without further escaping in HTML. Marking something as a “safe string” means that the producer of the string has already turned characters that should not be interpreted by the HTML engine (e.g. ‘<’) into the appropriate entities.



mark_safe(s): Explicitly mark a string as safe for (HTML) output purposes. If the string is modified, it loses its 'safe' attribute. Calling this function on a string explicitly certifies that the output is safe regardless of how the string was built.

------------------------------------------------------------------------------------

DEBUGGER:
import pdb; pdb.set_trace()
    

Import table in mysql workbench:
mysql> SET FOREIGN_KEY_CHECKS=0;
mysql> LOAD DATA LOCAL INFILE 'c:/tmp/discounts.csv' 
INTO TABLE discounts 
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

